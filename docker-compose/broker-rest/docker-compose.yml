version: '3.8'

services:

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9100:9100"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - rest-network

  grafana:
    image: "grafana/grafana:latest"
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - rest-network
    depends_on:
      - prometheus

  postgresdev:
    image: postgres:13.0-alpine
    environment:
      # Create db
      POSTGRES_DB: data_access
      # Use postgres/secret user/password credentials
      POSTGRES_PASSWORD: secret
      # enforce UTC timezone
      TZ: UTC
    volumes:
      - rest-data-local:/var/lib/postgresql/rest/data
    ports:
      - 5432:5432
    networks:
      - rest-network

  adminer:
    image: adminer:4
    ports:
      - 8081:8080
    networks:
      - rest-network

  configmanager:
    image: jcorderop/configmanager:latest
    ports:
      - "9080:9080"
    networks:
      - rest-network

  loadbalancer:
    image: jcorderop/loadbalancer:latest
    ports:
      - "9082:9082"
    networks:
      - rest-network
    depends_on:
      - configserver
    deploy:
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s
    environment:
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configmanager:9080/

  dataaccess:
    image: jcorderop/data-access:latest
    ports:
      - "9081:9081"
    environment:
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: optional:configserver:http://configmanager:9080/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresdev:5432/data_access
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://loadbalancer:9082/eureka/
    networks:
      - rest-network
    depends_on:
      - configserver
      - loadbalancer
      - postgresdev
    deploy:
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s




# permanent storage of data.
# > docker volume rm rest-data-local
volumes:
  rest-data-local:

networks:
  rest-network:



